program point_math.aleo;

record Point:
    owner as address.private;
    x as u32.private;
    y as u32.private;

function create_point:
    input r0 as u32.private;
    input r1 as u32.private;
    cast self.caller r0 r1 into r2 as Point.record;
    output r2 as Point.record;

function add_points:
    input r0 as Point.record;
    input r1 as Point.record;
    add r0.x r1.x into r2;
    add r0.y r1.y into r3;
    cast r0.owner r2 r3 into r4 as Point.record;
    output r4 as Point.record;

closure sqrt_bitwise:
    input r0 as u32;
    shl 1u32 30u8 into r1;
    gt r1 r0 into r2;
    cast r2 into r3 as u32;
    mul r3 2u32 into r4;
    shr r1 r4 into r5;
    add 0u32 r5 into r6;
    gte r0 r6 into r7;
    add 0u32 r5 into r8;
    sub r0 r8 into r9;
    shr 0u32 1u32 into r10;
    add r10 r5 into r11;
    not r7 into r12;
    shr 0u32 1u32 into r13;
    ternary r7 r9 r0 into r14;
    ternary r7 r11 r13 into r15;
    gt r5 r14 into r16;
    cast r16 into r17 as u32;
    mul r17 2u32 into r18;
    shr r5 r18 into r19;
    add r15 r19 into r20;
    gte r14 r20 into r21;
    add r15 r19 into r22;
    sub r14 r22 into r23;
    shr r15 1u32 into r24;
    add r24 r19 into r25;
    not r21 into r26;
    shr r15 1u32 into r27;
    ternary r21 r23 r14 into r28;
    ternary r21 r25 r27 into r29;
    gt r19 r28 into r30;
    cast r30 into r31 as u32;
    mul r31 2u32 into r32;
    shr r19 r32 into r33;
    add r29 r33 into r34;
    gte r28 r34 into r35;
    add r29 r33 into r36;
    sub r28 r36 into r37;
    shr r29 1u32 into r38;
    add r38 r33 into r39;
    not r35 into r40;
    shr r29 1u32 into r41;
    ternary r35 r37 r28 into r42;
    ternary r35 r39 r41 into r43;
    gt r33 r42 into r44;
    cast r44 into r45 as u32;
    mul r45 2u32 into r46;
    shr r33 r46 into r47;
    add r43 r47 into r48;
    gte r42 r48 into r49;
    add r43 r47 into r50;
    sub r42 r50 into r51;
    shr r43 1u32 into r52;
    add r52 r47 into r53;
    not r49 into r54;
    shr r43 1u32 into r55;
    ternary r49 r51 r42 into r56;
    ternary r49 r53 r55 into r57;
    gt r47 r56 into r58;
    cast r58 into r59 as u32;
    mul r59 2u32 into r60;
    shr r47 r60 into r61;
    add r57 r61 into r62;
    gte r56 r62 into r63;
    add r57 r61 into r64;
    sub r56 r64 into r65;
    shr r57 1u32 into r66;
    add r66 r61 into r67;
    not r63 into r68;
    shr r57 1u32 into r69;
    ternary r63 r65 r56 into r70;
    ternary r63 r67 r69 into r71;
    gt r61 r70 into r72;
    cast r72 into r73 as u32;
    mul r73 2u32 into r74;
    shr r61 r74 into r75;
    add r71 r75 into r76;
    gte r70 r76 into r77;
    add r71 r75 into r78;
    sub r70 r78 into r79;
    shr r71 1u32 into r80;
    add r80 r75 into r81;
    not r77 into r82;
    shr r71 1u32 into r83;
    ternary r77 r79 r70 into r84;
    ternary r77 r81 r83 into r85;
    gt r75 r84 into r86;
    cast r86 into r87 as u32;
    mul r87 2u32 into r88;
    shr r75 r88 into r89;
    add r85 r89 into r90;
    gte r84 r90 into r91;
    add r85 r89 into r92;
    sub r84 r92 into r93;
    shr r85 1u32 into r94;
    add r94 r89 into r95;
    not r91 into r96;
    shr r85 1u32 into r97;
    ternary r91 r93 r84 into r98;
    ternary r91 r95 r97 into r99;
    gt r89 r98 into r100;
    cast r100 into r101 as u32;
    mul r101 2u32 into r102;
    shr r89 r102 into r103;
    add r99 r103 into r104;
    gte r98 r104 into r105;
    add r99 r103 into r106;
    sub r98 r106 into r107;
    shr r99 1u32 into r108;
    add r108 r103 into r109;
    not r105 into r110;
    shr r99 1u32 into r111;
    ternary r105 r107 r98 into r112;
    ternary r105 r109 r111 into r113;
    gt r103 r112 into r114;
    cast r114 into r115 as u32;
    mul r115 2u32 into r116;
    shr r103 r116 into r117;
    add r113 r117 into r118;
    gte r112 r118 into r119;
    add r113 r117 into r120;
    sub r112 r120 into r121;
    shr r113 1u32 into r122;
    add r122 r117 into r123;
    not r119 into r124;
    shr r113 1u32 into r125;
    ternary r119 r121 r112 into r126;
    ternary r119 r123 r125 into r127;
    gt r117 r126 into r128;
    cast r128 into r129 as u32;
    mul r129 2u32 into r130;
    shr r117 r130 into r131;
    add r127 r131 into r132;
    gte r126 r132 into r133;
    add r127 r131 into r134;
    sub r126 r134 into r135;
    shr r127 1u32 into r136;
    add r136 r131 into r137;
    not r133 into r138;
    shr r127 1u32 into r139;
    ternary r133 r135 r126 into r140;
    ternary r133 r137 r139 into r141;
    gt r131 r140 into r142;
    cast r142 into r143 as u32;
    mul r143 2u32 into r144;
    shr r131 r144 into r145;
    add r141 r145 into r146;
    gte r140 r146 into r147;
    add r141 r145 into r148;
    sub r140 r148 into r149;
    shr r141 1u32 into r150;
    add r150 r145 into r151;
    not r147 into r152;
    shr r141 1u32 into r153;
    ternary r147 r149 r140 into r154;
    ternary r147 r151 r153 into r155;
    gt r145 r154 into r156;
    cast r156 into r157 as u32;
    mul r157 2u32 into r158;
    shr r145 r158 into r159;
    add r155 r159 into r160;
    gte r154 r160 into r161;
    add r155 r159 into r162;
    sub r154 r162 into r163;
    shr r155 1u32 into r164;
    add r164 r159 into r165;
    not r161 into r166;
    shr r155 1u32 into r167;
    ternary r161 r163 r154 into r168;
    ternary r161 r165 r167 into r169;
    gt r159 r168 into r170;
    cast r170 into r171 as u32;
    mul r171 2u32 into r172;
    shr r159 r172 into r173;
    add r169 r173 into r174;
    gte r168 r174 into r175;
    add r169 r173 into r176;
    sub r168 r176 into r177;
    shr r169 1u32 into r178;
    add r178 r173 into r179;
    not r175 into r180;
    shr r169 1u32 into r181;
    ternary r175 r177 r168 into r182;
    ternary r175 r179 r181 into r183;
    gt r173 r182 into r184;
    cast r184 into r185 as u32;
    mul r185 2u32 into r186;
    shr r173 r186 into r187;
    add r183 r187 into r188;
    gte r182 r188 into r189;
    add r183 r187 into r190;
    sub r182 r190 into r191;
    shr r183 1u32 into r192;
    add r192 r187 into r193;
    not r189 into r194;
    shr r183 1u32 into r195;
    ternary r189 r191 r182 into r196;
    ternary r189 r193 r195 into r197;
    gt r187 r196 into r198;
    cast r198 into r199 as u32;
    mul r199 2u32 into r200;
    shr r187 r200 into r201;
    add r197 r201 into r202;
    gte r196 r202 into r203;
    add r197 r201 into r204;
    sub r196 r204 into r205;
    shr r197 1u32 into r206;
    add r206 r201 into r207;
    not r203 into r208;
    shr r197 1u32 into r209;
    ternary r203 r205 r196 into r210;
    ternary r203 r207 r209 into r211;
    gt r201 r210 into r212;
    cast r212 into r213 as u32;
    mul r213 2u32 into r214;
    shr r201 r214 into r215;
    add r211 r215 into r216;
    gte r210 r216 into r217;
    add r211 r215 into r218;
    sub r210 r218 into r219;
    shr r211 1u32 into r220;
    add r220 r215 into r221;
    not r217 into r222;
    shr r211 1u32 into r223;
    ternary r217 r219 r210 into r224;
    ternary r217 r221 r223 into r225;
    output r225 as u32;

function distance:
    input r0 as Point.record;
    input r1 as Point.record;
    sub r0.x r1.x into r2;
    sub r0.y r1.y into r3;
    mul r2 r2 into r4;
    mul r3 r3 into r5;
    add r4 r5 into r6;
    call sqrt_bitwise r6 into r7;
    output r7 as u32.private;
