program big_transition.aleo;



function main:
    cast  0u16 0u16 0u16 0u16 0u16 0u16 0u16 0u16 0u16 0u16 0u16 0u16 0u16 0u16 0u16 0u16 0u16 0u16 0u16 0u16 0u16 0u16 0u16 0u16 0u16 0u16 0u16 0u16 0u16 0u16 0u16 0u16 into r0 as [u16; 32u32];
    cast  r0 r0 r0 r0 r0 r0 r0 r0 r0 r0 r0 r0 r0 r0 r0 r0 r0 r0 r0 r0 r0 r0 r0 r0 r0 r0 r0 r0 r0 r0 r0 r0 into r1 as [[u16; 32u32]; 32u32];
    cast  r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 into r2 as [[[u16; 32u32]; 32u32]; 16u32];
    cast  r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 into r3 as [[[u16; 32u32]; 32u32]; 16u32];
    cast  r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 into r4 as [[[u16; 32u32]; 32u32]; 16u32];
    cast  r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 into r5 as [[[u16; 32u32]; 32u32]; 16u32];
    cast  r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 into r6 as [[[u16; 32u32]; 32u32]; 16u32];
    cast  r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 into r7 as [[[u16; 32u32]; 32u32]; 16u32];
    cast  r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 into r8 as [[[u16; 32u32]; 32u32]; 16u32];
    cast  r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 into r9 as [[[u16; 32u32]; 32u32]; 16u32];
    cast  r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 into r10 as [[[u16; 32u32]; 32u32]; 16u32];
    cast  r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 into r11 as [[[u16; 32u32]; 32u32]; 16u32];
    cast  r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 into r12 as [[[u16; 32u32]; 32u32]; 16u32];
    cast  r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 into r13 as [[[u16; 32u32]; 32u32]; 16u32];
    cast  r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 into r14 as [[[u16; 32u32]; 32u32]; 16u32];
    cast  r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 into r15 as [[[u16; 32u32]; 32u32]; 16u32];
    cast  r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 into r16 as [[[u16; 32u32]; 32u32]; 16u32];
    cast  r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 r1 into r17 as [[[u16; 32u32]; 32u32]; 16u32];
    output r2 as [[[u16; 32u32]; 32u32]; 16u32].public;
    output r3 as [[[u16; 32u32]; 32u32]; 16u32].public;
    output r4 as [[[u16; 32u32]; 32u32]; 16u32].public;
    output r5 as [[[u16; 32u32]; 32u32]; 16u32].public;
    output r6 as [[[u16; 32u32]; 32u32]; 16u32].public;
    output r7 as [[[u16; 32u32]; 32u32]; 16u32].public;
    output r8 as [[[u16; 32u32]; 32u32]; 16u32].public;
    output r9 as [[[u16; 32u32]; 32u32]; 16u32].public;
    output r10 as [[[u16; 32u32]; 32u32]; 16u32].public;
    output r11 as [[[u16; 32u32]; 32u32]; 16u32].public;
    output r12 as [[[u16; 32u32]; 32u32]; 16u32].public;
    output r13 as [[[u16; 32u32]; 32u32]; 16u32].public;
    output r14 as [[[u16; 32u32]; 32u32]; 16u32].public;
    output r15 as [[[u16; 32u32]; 32u32]; 16u32].public;
    output r16 as [[[u16; 32u32]; 32u32]; 16u32].public;
    output r17 as [[[u16; 32u32]; 32u32]; 16u32].public;
