program leoswapxyz_v000001.aleo {

    /// ██████████████████████████████████████████████████████████████████████
    ///                                 Tokens
    /// ██████████████████████████████████████████████████████████████████████

    record Token {
        owner: address,
        amount: u128,
        token_id: u64,
    }

    struct TokenInfo {
        token_id: u64,        
        max_supply: u128,
        decimals: u8,
    }

    mapping registered_tokens: u64 => TokenInfo;
    mapping tokens_supply: u64 => u128;
    mapping account_balance: address => u128;

    transition init_tokens() {
        // TODO only owner check: assert(self.caller = aleo1xxxxxxxxxx);
        return then finalize();  
    }
    
    finalize init_tokens() {
        let decimals: u8 = 6u8;
        Mapping::set(registered_tokens, 1u64, TokenInfo {
             token_id: 1u64,
             max_supply: 1000000000u128 * (10u128 ** decimals),
             decimals,
        });    
        Mapping::set(registered_tokens, 2u64, TokenInfo {
             token_id: 1u64,
             max_supply: 1000000000u128 * (10u128 ** decimals),
             decimals,
        });    
        Mapping::set(registered_tokens, 3u64, TokenInfo {
             token_id: 1u64,
             max_supply: 1000000000u128 * (10u128 ** decimals),
             decimals,
        });    
        Mapping::set(registered_tokens, 4u64, TokenInfo {
             token_id: 1u64,
             max_supply: 1000000000u128 * (10u128 ** decimals),
             decimals,
        });    

        Mapping::set(tokens_supply, 1u64, 0u128);    
        Mapping::set(tokens_supply, 2u64, 0u128);    
        Mapping::set(tokens_supply, 3u64, 0u128);    
        Mapping::set(tokens_supply, 4u64, 0u128);  
    }

    transition create_token(public token_id: u64, public decimals: u8, public max_supply: u128) {
        // TODO only owner check: assert(self.caller = aleo1xxxxxxxxxx);
        let new_token: TokenInfo = TokenInfo{
            token_id,
            decimals,
            max_supply,
        };
        return then finalize(new_token);
    }

    finalize create_token(public new_token: TokenInfo) {
        assert(!Mapping::contains(registered_tokens, new_token.token_id));
        Mapping::set(registered_tokens, new_token.token_id, new_token);    
        Mapping::set(tokens_supply, new_token.token_id, 0u128);    
    }


    transition mint_public(public receiver: address, token_id: u64, public amount: u128) {
        return then finalize(receiver, token_id, amount);
    }

    finalize mint_public(public receiver: address, public token_id: u64, public amount: u128) {
        let token_info: TokenInfo = Mapping::get(registered_tokens, token_id);
        assert(amount <= 1000u128 (10u128 ** token_info.decimals));

        let new_supply: u128 = Mapping::get(tokens_supply, token_id) + amount;
        assert(token_info.max_supply > new_supply);
        let receiver_balance: u128 = Mapping::get_or_use(account_balance, receiver, 0u128);
        Mapping::set(account_balance, receiver, receiver_balance + amount);
        Mapping::set(tokens_supply, token_id, new_supply);
    }

    transition mint_private(
        receiver: address, 
        token_id: u64, 
        amount: u128,
    ) -> Token {
        assert(amount <= 1000u128 * (10u128 ** 6u8));
        return Token {
            owner: receiver,
            amount: amount,
            token_id,
        } then finalize(token_id);        
    }

    finalize mint_private(token_id: u64) {
        let token_info: TokenInfo = Mapping::get(registered_tokens, token_id);
    }

    // struct ProgramName {
    //     c1: u8, c2: u8, c3: u8, c4: u8, c5: u8, c6: u8, c7: u8, c8: u8, c9: u8, 
    //     c10: u8, c11: u8, c12: u8, c13: u8, c14: u8, c15: u8, c16: u8, c17: u8, c18: u8
    // }

    // inline this() -> ProgramName {
    //     return ProgramName {
    //         c1: 1u8, c2: 2u8, c3: 3u8, c4: 4u8, c5: 5u8, c6: 6u8, c7: 7u8, c8: 8u8, c9: 9u8, 
    //         c10: 10u8, c11: 11u8, c12: 12u8, c13: 13u8, c14: 14u8, c15: 15u8, c16: 16u8, c17: 17u8, c18: 18u8
    //     };
    // }

    // transition transfer_private_to_public_program(token: Token, amount: u128, receiver: ProgramName) -> Token {      
    //     let program_address: address = Poseidon8::hash_to_address(receiver);

    //     let difference: u128 = token.amount - amount;
    //     let change: Token = Token {
    //         owner: token.owner,
    //         amount: difference,
    //         token_id: token.token_id
    //     };

    //     return change then finalize(program_address, amount);   
    // }

    // finalize transfer_private_to_public_program(public receiver: address, public amount: u128) {
    //     let receiver_amount: u128 = Mapping::get_or_use(account_balance, receiver, 0u128);
    //     Mapping::set(account_balance, receiver, receiver_amount + amount);
    // }




    /// ██████████████████████████████████████████████████████████████████████
    ///                             Private RFQ Swaps 
    /// ██████████████████████████████████████████████████████████████████████
    
    // the key is hash(maker's address) + hash(token_id)
    mapping maker_deposits: field  => u128;


    transition rfq_add_liquidity(t: Token, amount: u128) -> Token {
        let deposit_id: field = Poseidon8::hash_to_field(self.caller) + Poseidon8::hash_to_field(t.token_id);      
        
        let difference: u128 = t.amount - amount;
        let change: Token = Token {
            owner: t.owner,
            amount: difference,
            token_id: t.token_id,
        };
  
        return change then finalize(
            deposit_id, 
            t.token_id, 
            amount
        );        
    }
    finalize rfq_add_liquidity(deposit_id: field, token_id: u64, amount: u128) {
        assert(Mapping::contains(registered_tokens, token_id));    
        let balance: u128 = Mapping::get_or_use(maker_deposits, deposit_id, 0u128);
        Mapping::set(maker_deposits, deposit_id, balance + amount);
    }

    transition rfq_remove_liquidity(token_id: u64, amount: u128) -> Token {
        let deposit_id: field = Poseidon8::hash_to_field(self.caller) + Poseidon8::hash_to_field(token_id);
        return Token {
            owner: self.caller,
            amount,
            token_id,
        } then finalize(
            deposit_id, 
            amount
        );        

    }
    finalize rfq_remove_liquidity(deposit_id: field, amount: u128) {
        let balance: u128 = Mapping::get(maker_deposits, deposit_id);
        assert(balance >= amount);
        Mapping::set(maker_deposits, deposit_id, balance - amount);
    }

    struct Quote {
        amount_in: u128,
        amount_out: u128,
        token_in: u64,
        token_out: u64,  
        maker_address: address,      
        maker_address_g: group,      
        valid_until: u32
    }

    struct Signature {
        challenge: scalar,

        response_1_32: ScalarBits,
        response_33_64: ScalarBits,
        response_65_96: ScalarBits,
        response_97_128: ScalarBits,
        response_129_160: ScalarBits,
        response_161_192: ScalarBits,
        response_193_224: ScalarBits,
        response_225_251: ScalarBits,
        
        pk_sig: group,
        pr_sig: group,

        sk_prf_1_32: ScalarBits,
        sk_prf_33_64: ScalarBits,
        sk_prf_65_96: ScalarBits,
        sk_prf_97_128: ScalarBits,
        sk_prf_129_160: ScalarBits,
        sk_prf_161_192: ScalarBits,
        sk_prf_193_224: ScalarBits,
        sk_prf_225_251: ScalarBits,
    }

    transition quote_swap(
        t: Token, 
        q: Quote,
        s: Signature
    ) -> bool {
        let is_valid_sig: bool = verify_signature(q,s);
        assert(is_valid_sig);
        assert(!is_valid_sig);
        assert_eq(is_valid_sig, true);
        assert_neq(is_valid_sig, true);
        assert(is_valid_sig == true);
        return is_valid_sig;

        // -> // -> (Token, Token, bool)
        // assert(t.token_id == q.token_in);        
        // assert(t.amount >= q.amount_in);

        // let delta: u128 = t.amount - q.amount_in;
        // let change: Token = Token {
        //     owner: t.owner,
        //     amount: delta,
        //     token_id: t.token_id,
        // };
  
        // let deposit_id: field = Poseidon8::hash_to_field(q.maker_address) + Poseidon8::hash_to_field(q.token_out);

        // return (Token {
        //     owner: self.caller,
        //     amount: q.amount_out,
        //     token_id: q.token_out,
        // }, change, is_valid_sig) then finalize(deposit_id, q.amount_out, q.token_out, q.valid_until);        
    }

    // finalize quote_swap(deposit_id: field, amount: u128, token_id: u64, valid_until: u32) {
    //     assert(valid_until < block.height);
    //     assert(Mapping::contains(registered_tokens, token_id));  

    //     let balance: u128 = Mapping::get(maker_deposits, deposit_id);
    //     assert(balance >= amount);
    //     Mapping::set(maker_deposits, deposit_id, balance - amount);
    // }

    function verify_signature(q: Quote, s: Signature) -> bool  { 

        let g_r: group = g_scalar_multiply(
            s.response_1_32,
            s.response_33_64,
            s.response_65_96,
            s.response_97_128,
            s.response_129_160,
            s.response_161_192,
            s.response_193_224,
            s.response_225_251,
        ) + s.pk_sig * s.challenge;

        let g_r_hash: scalar = Poseidon8::hash_to_scalar(g_r);
        let pk_sig_hash: scalar = Poseidon8::hash_to_scalar(s.pk_sig);
        let pr_sig_hash: scalar = Poseidon8::hash_to_scalar(s.pr_sig);
        let addr_hash: scalar = Poseidon8::hash_to_scalar(q.maker_address_g);
        let msg_hash: scalar = Poseidon8::hash_to_scalar(q);

        let candidate_challenge: scalar = g_r_hash + pk_sig_hash + pr_sig_hash + addr_hash + msg_hash;

        let g_addr: group = s.pk_sig + s.pr_sig + g_scalar_multiply(
            s.sk_prf_1_32,
            s.sk_prf_33_64,
            s.sk_prf_65_96,
            s.sk_prf_97_128,
            s.sk_prf_129_160,
            s.sk_prf_161_192,
            s.sk_prf_193_224,
            s.sk_prf_225_251,
        );
        let addr_flag: bool = g_addr == q.maker_address_g;
        let challenge_flag: bool = s.challenge == candidate_challenge;
        return addr_flag && challenge_flag;
    }

    function f (a: bool) -> bool {
        return !a;
    }


    inline g_scalar_multiply(
        r1_32: ScalarBits,
        r33_64: ScalarBits,
        r65_96: ScalarBits,
        r97_128: ScalarBits,
        r129_160: ScalarBits,
        r161_192: ScalarBits,
        r193_224: ScalarBits,
        r225_251: ScalarBits,
    ) -> group {
        let g1: group = 522678458525321116977504528531602186870683848189190546523208313015552693483group;
        let g2: group = 635729210006270224914087040697919839390416031021817704229162077382650990011group;
        let g3: group = 5513873148871679630587479498424269940189842178685040043448219147115308419015group;
        let g4: group = 4457134701418934866122997361044187331199714663533607092023093659206745666743group;
        let g5: group = 6286653923290709464352749403096853840459823769266766133929599747240001971233group;
        let g6: group = 3385956996818290536080097980840539769644014614529188916175500583879791820209group;
        let g7: group = 3974228644137128837769178717875501197410585554160965762865378066156495181832group;
        let g8: group = 6321259322851972519185643583548582776004291449542674683608531185014423449868group;
        let g9: group = 7922127111342584109174286811262252200334462349727722244252103039331507529799group;
        let g10: group = 1314696368501671664007687831204676952338284762821567968909205523133378378918group;
        let g11: group = 7240780520150420197696739242212341985310050164384202604180444062169890302420group;
        let g12: group = 5086615085237349970844778943201868661570781822050163869340323460122545085954group;
        let g13: group = 5057169433141065594534181692150923803348275188694514825058749570030821742296group;
        let g14: group = 1096300510064692067694531864746878901352557048382686114407527639113655811795group;
        let g15: group = 479992836420653711726381605848994773713867479725435466623543498615007945150group;
        let g16: group = 3977978520433879815393340242689609352148931149208115456885225645364077579030group;
        let g17: group = 3996030434784966891145687568407246463363670057726317278137923861184807756009group;
        let g18: group = 2181196740171770264461310635848051375190661188270505386985117196191957747722group;
        let g19: group = 6164985104582636883781761062813618292883272047407565079985306220575790660283group;
        let g20: group = 4999502189351119871517449388239806038172926066920537419242043171431983306067group;
        let g21: group = 6465221337409244639556593263692227027073286144212387110521377471507223641341group;
        let g22: group = 1131616471584455259206634000398216227261281065512069052993828118745009493992group;
        let g23: group = 5578810799948273166252301358746606549581399213156812460576788270541600817989group;
        let g24: group = 757411240819004421895975059702864210753675805582655071600274713899215194691group;
        let g25: group = 2481276539048473906959381986381088525430041167587605382992001579786128529869group;
        let g26: group = 3033890767590038725844818419922790019958048608026755552350476075750187839989group;
        let g27: group = 3573578509449760295515608675496620544009951936610685662951874068902904051020group;
        let g28: group = 933929079089196985911756113177940563087127079796494946038147026772713936770group;
        let g29: group = 2044840932177128191467386002374414818249266578986626922193924686192979714313group;
        let g30: group = 2262929494266300099027052221720873991296859702439159186510472542616522136716group;
        let g31: group = 5529927908592147710653077974595332017945740388936531321191047373506115421171group;
        let g32: group = 1367402496854678076564009502631275055401013848961720389219613222663467939156group;
        let g33: group = 2957368700092819188310512024412030211118487833071912505349811014398666919262group;
        let g34: group = 7572549419474110394689425502333395511825514547041557951449351705819871036901group;
        let g35: group = 5104490616568928632749389833680980831311080348881719373653694329998364942426group;
        let g36: group = 4301787318501802660111741355329205572369034508799774852796023021842977958236group;
        let g37: group = 5696141558450667092391433812135098499306513225315267680628259681703790629919group;
        let g38: group = 4010261425738660440308483003646568108536480633668576160077552909365028804726group;
        let g39: group = 5274259294714273425996824265919066067824190564472025788444751046513764475685group;
        let g40: group = 3724390698662600204913133587931252471751464993593266548830728026854480893319group;
        let g41: group = 2940566340604828574889689352903795142153100270838653157476175913764084904823group;
        let g42: group = 4271715215894659134800387623192866628537305080588639414336653561509730559988group;
        let g43: group = 2554553133586273544615456729471620004641178894481738247659622255370268582452group;
        let g44: group = 7985643562394935133258667529032408043329172383796421153341861915388316297852group;
        let g45: group = 1057494064681210797567424202183355782703438900241832377519035371075965823151group;
        let g46: group = 8268371607308581504029726077905600955234780979628752890688060137275108837316group;
        let g47: group = 7220396374239364104571424420022738227963399006986423526866337640466879794336group;
        let g48: group = 7604465169489639215806039821088271153046646029876355526070873619521192286289group;
        let g49: group = 2433334812198206377739600221849982089934618606236943222233239271499460503684group;
        let g50: group = 3933266548086725814226737494991099763778357706204373992089750540828555250089group;
        let g51: group = 6067325601846311649026642032973231912620149547486511041181261818331839033360group;
        let g52: group = 6822517855838294381325401642298661466621382800744939919884708600244267430380group;
        let g53: group = 5322145956725565029554190886357374512620627767370668574698350602079611604047group;
        let g54: group = 5942864290276184522735394886027436496741030978852658268533298089203630382460group;
        let g55: group = 4525505431879904891878984305111712950410804223544611188885801608231126476638group;
        let g56: group = 1456583746966653023753089506666333277835923269382452132033824911000982320993group;
        let g57: group = 3628121965607979639761111870407552571354009993655287309361131894231740329929group;
        let g58: group = 3088558806039832046862954212204395005199388230611197679166756134865160094174group;
        let g59: group = 3238186866090971042836831206104885138256550143307710620333433280289517021255group;
        let g60: group = 599103064233938722585080339795897773286722788236868156234866284045516179916group;
        let g61: group = 7454013763788191209181484671633614755447286074464301843517690548855517338845group;
        let g62: group = 8144295829685992406765818906508335237370389211902873318085982755360794018479group;
        let g63: group = 1872140737606971377804518681027759437708182000030708862991357779456093875202group;
        let g64: group = 1069776671520594883035764169975241045963749879347202174155683738675020008803group;
        let g65: group = 483686428194072781330619662231577397554292337949437658097673133660595726092group;
        let g66: group = 7824471019408802278914522424154598912618057346897426727811150089054786698712group;
        let g67: group = 5333304042088273987588520011444145143619515368670696813244686872442579098780group;
        let g68: group = 6162267312946459571926308841403826751634037040736170765075786896873535447119group;
        let g69: group = 5390905567844649322988722755278235790372043637610125136588975970224994265396group;
        let g70: group = 4923857025287221822128327712676520261630659108861089539075654972085339039489group;
        let g71: group = 8158834549866050782328854832134109385913264961663822230284296820125013132672group;
        let g72: group = 279460770956074458874754949054499837191146100741530037102444811933083171454group;
        let g73: group = 549929735763440886285016473812380409146198364328642304194383266992855082384group;
        let g74: group = 3857734619511387313225351380553849291257416878338293156629117093491686754227group;
        let g75: group = 7711795752505910871540753488624954298369547346812538826210328549253730700826group;
        let g76: group = 6906409899581468518155375547279167506456419366279576115827885958141352831996group;
        let g77: group = 5176392162477288187601472204025168461683844687276431631946088206376845373067group;
        let g78: group = 3080015026597788803994725667467041726118929823388459434782577639749131261491group;
        let g79: group = 2394278632631458693209071008353648559403504263968225785396492822279104277197group;
        let g80: group = 8405806393976996372946375919859515350606647344008576626832803447520168817977group;
        let g81: group = 5961811310923833462451738938066350500436139325923057012571005511063583168551group;
        let g82: group = 3729584802731139287106029505945836078446201522304313709348482964050528923750group;
        let g83: group = 7160045915819699700156788641061445150879860807674111522725655199610290050971group;
        let g84: group = 701160770230834224555055838221531832278130871606340949830167835874114909913group;
        let g85: group = 4560107240508521736014277792756834325558912978427932933953936675176635735214group;
        let g86: group = 402187683959520743474786848952614521825792484379688649038808742093795691785group;
        let g87: group = 540079954436088865465555526929670978003127776481151763584844595088669002476group;
        let g88: group = 3279462665744155734430180526556314956381773823812130727539197796850334703808group;
        let g89: group = 8343935241333030010988330027831790322323421755951619182010135947412114596128group;
        let g90: group = 5278704075816797129117107653146130133217766348357944789226185192959875765883group;
        let g91: group = 7216008708040027079774665035480416246335636609241338025230719651682282069074group;
        let g92: group = 5012818245361394451545669640543350142838603973992118022779540962107141131760group;
        let g93: group = 8054877740507795345986868877385829247764589363399936528672361541731668047249group;
        let g94: group = 6672955892888189744603288298567681059255081367188953653178869931643500050721group;
        let g95: group = 6661091056641070936112936594475102719715822073982877303227827297067226303813group;
        let g96: group = 5525170228770684880970456927960415540909402582401653873451661749797892156073group;
        let g97: group = 8115126027382210033197495504359143013392324953030644077472263963018617952085group;
        let g98: group = 6578361811948833536135434975494068713231407442924806566053487872283381381627group;
        let g99: group = 2299309520619896561245045195130192504537031410698198130124195853604229352182group;
        let g100: group = 2297364257150183045425891053281007874818822604712397599074817057569594920469group;
        let g101: group = 4165019049489776550406357071770806179905998402190638793849554856541774338779group;
        let g102: group = 4484988210572371751439426889011290668861262117209307822744126461990876947425group;
        let g103: group = 5873581080546154943423716712886770162073321186435398601270679980145614273865group;
        let g104: group = 397961053271605290296171929105519615877718662250909902129098397292755971613group;
        let g105: group = 4449811391383525757982435414799345992013840221897100803849345679703361369188group;
        let g106: group = 61274668131665640322901878211706987173606241682042011943340856410122709205group;
        let g107: group = 7430755704149932223831116314073449540994509912763509385875167204638198487147group;
        let g108: group = 5351746128496776784814504197276685749413302712998597235610260853677768539661group;
        let g109: group = 5510410827500031645184668447772494050378329787659012204630070783913151269922group;
        let g110: group = 4714669958506465790748060055800766329249443108264685450372523783117131866743group;
        let g111: group = 6341184376515004532119622813427779400388364501677289818998051229806559715183group;
        let g112: group = 3068444594497378553358324666976565525829757438771867253324550664943859219399group;
        let g113: group = 7602510541703484368059679868838627650002984450376825866553220730164107230253group;
        let g114: group = 6749748018707844969866023442972936223628871518762813165236337335770736451746group;
        let g115: group = 1363146678672147660374946284951629774003166338174313499800539608630658440971group;
        let g116: group = 7459220511361731481733592169752573664379975843936672968181025878560630568248group;
        let g117: group = 4225221508234315985036478162374361186215150104271476621325343101518911333228group;
        let g118: group = 4284269761443756871846203859281252580036696288643738058339175300917639508729group;
        let g119: group = 4925886318375620998883997633411990299089030862954172501637640879744605303397group;
        let g120: group = 2621067449068389260516458540503789872008041356140951072901207656722420947136group;
        let g121: group = 4068005474651015417225804117214155989480232466840243122495924288083260084913group;
        let g122: group = 350828444953807939079967745484516890129944871548065398462014358379665678598group;
        let g123: group = 895769193262468569081683108209569935661528963445963975989453330580683043387group;
        let g124: group = 3575105358558925160761034880835721511638513554224871695013581128255302962559group;
        let g125: group = 7363851654174311455850358355801362710917515127646421845462562677662934209420group;
        let g126: group = 5732951833893508566264567047334754530886752214822812608084420213834718116718group;
        let g127: group = 7635201360711055235498676740924561125566798761093557141162947491289544345973group;
        let g128: group = 8038031696897603723802338449365523988331698697595440031637740388228599424548group;
        let g129: group = 3696883708624667280714180129812198826627744081231451550379539012617016906489group;
        let g130: group = 6704031878294392434481850420063219572417384631085077980248602966174989312040group;
        let g131: group = 3177960443196832022300878727142058790334530332512069289389868286081307914054group;
        let g132: group = 2682944788374616094101062017387909645028235632645187214615935267782403593144group;
        let g133: group = 3851886785640352759595385071714803705711631559884435422609281028181200275580group;
        let g134: group = 3187380331601233861016741756886178128366962455185982318027110064805894976536group;
        let g135: group = 4040673342704144497681136241125259062126905815610540412756032040177188579544group;
        let g136: group = 2048326324996396771347443654894204231788239315263616764149334740492667477935group;
        let g137: group = 1665610917662634975885315313162361225300858362056891837312868723727986052264group;
        let g138: group = 1858353256124181097361197106931555209766117286434394141156903704581263445024group;
        let g139: group = 2509824114569116323636434963836525375050743953305294760188857992278224908688group;
        let g140: group = 5338708578236996497973186010339040838425820558684416640701175636532824405682group;
        let g141: group = 5012096857123824133030542357829050232009833675193541394432254039073130981046group;
        let g142: group = 757025220759292302687679316528020369614724354364838716965854740887908796053group;
        let g143: group = 5534950054419953469031611010378312058550524735175276356810654520751751626094group;
        let g144: group = 4485908578643498334885486812530833113896305327846023527931139073651222138271group;
        let g145: group = 5269795327352277383435352941188158511030297434514463724967725695889284920721group;
        let g146: group = 5700948315771180533180010882685292012606986649220693683371065068233147802446group;
        let g147: group = 4793336201184729464148209307182318793809969332468220113783618193792623443845group;
        let g148: group = 6383352611780690195004573601046470611573505500896351624787592258324125255028group;
        let g149: group = 5951084603706154030344221393610985046081518793899564383632524533893137555953group;
        let g150: group = 5044759808135252368877250662633624684752991354171780063667559382275643611822group;
        let g151: group = 1491962681353476277549492136321480708398579914631839490678823617553498031976group;
        let g152: group = 7145683763713744393682491094856444968118474437391101831747192127352863762545group;
        let g153: group = 1703025930297585557726745019517234262402643320642934294273723325305042884400group;
        let g154: group = 4149584660987067967031339059913140782077756642493125365801386410899382163413group;
        let g155: group = 131129197321471570574276495057552764510318316959987109063558712727761521662group;
        let g156: group = 7536216594990043497048290788227094417864282529281590507571656317339613272912group;
        let g157: group = 2959650050715805864450765963982167089152930810895988767730534487240650850721group;
        let g158: group = 4948143003905267065159395953853641180135933395341646247889754383893873679902group;
        let g159: group = 5203754550713857826639896261792179158527186304788810623993340525173751857193group;
        let g160: group = 779596485584871719002864628011711776984589463530805005906335295071039995308group;
        let g161: group = 5872358144625274128344184080025211433866995644515739917930305281936199249867group;
        let g162: group = 1440555396818069961733528166413507914687929131788749856629912738187728132294group;
        let g163: group = 3873077954879306176550456270108947531601476459428778033407750748578306917738group;
        let g164: group = 5214211204527913945375771359115971430680247874601489157333108660391382790478group;
        let g165: group = 4663266058793600150658104437003699405332554687917521783473082577016317534270group;
        let g166: group = 7279239763848916881350665859470760371105394019298434603107984676395891132022group;
        let g167: group = 6949719677558610948617393781951121167639687701262402809815183785396264134075group;
        let g168: group = 1872950644390182097887672796030292992273670297853029510188089884046614535055group;
        let g169: group = 6581096840483396566793336463098953018735311297547266609787236721407282638962group;
        let g170: group = 9665142277132933337183349967017698467289914873591746321467295205192926799group;
        let g171: group = 6960391678944373142846751525595691535663677707234304435354740651480001633550group;
        let g172: group = 4285226765621378429013879711546264877216185345445012103178687507471925926543group;
        let g173: group = 5793070014683144290738033466167438770258287330660746777899769842817883343570group;
        let g174: group = 6900223177741359304180825226807974123225055081005238781921139044703955578417group;
        let g175: group = 8349084985345044052728747560621997570023905617378967910155878389059461105573group;
        let g176: group = 3582192830450074243487506801928195600591279084569129857265689746884394269391group;
        let g177: group = 8406026406596388479897453988954130687531861172946482947000319221680565352859group;
        let g178: group = 790189144358547773135777182417719227481389656819439519579529593484312549800group;
        let g179: group = 5152775459316047809595251266573521710600567505905790421588191902355218532703group;
        let g180: group = 881310901006449269571254728438604613275723892974355732952892672213696296323group;
        let g181: group = 2067606936514725299080827947953548074415533657099691932844319088316133360029group;
        let g182: group = 2901182347683708555265852265782240486825921482694955777908796666550349129814group;
        let g183: group = 2107921461944542055474716817899998512527917701687463632626266807258072392434group;
        let g184: group = 4092139452771361938140504756530740080476464582099127665574855568705179688172group;
        let g185: group = 4962335529096708499205318499804326302730932552705862500823497710704918324994group;
        let g186: group = 4625877855347986250937950170978510886581212800947125804768267316750631047234group;
        let g187: group = 3595613473943051871697091146371894474931149321238169708524428235228224910160group;
        let g188: group = 1475035800220795414184181632717471824117807993142495589231370589489944762951group;
        let g189: group = 4587970137060792395274850629633294096520491927623825048188130795289160951651group;
        let g190: group = 1293062768591308258754569209395499685387919933245313830411266700553869440374group;
        let g191: group = 7934250022661778936702633933419201280023736801461069959913463647668965553390group;
        let g192: group = 3349909555264439778659584738847996164309854239635340298945458423990388552456group;
        let g193: group = 7749999255016744022776588956730754531403452797542704774151710182982679307283group;
        let g194: group = 6863855525625854837618954049559009700352720338233072234853181306310009329429group;
        let g195: group = 4089052199988737520167465971422429726669060051571109109955532242056434033611group;
        let g196: group = 5238047109902162373264514605036620110541714918300717268019190326450486783399group;
        let g197: group = 5560983838628130662361900523109988095752296796692916738864080046629432259941group;
        let g198: group = 4600701181320907868689759453701137332309576024847708171005409124173524553668group;
        let g199: group = 7047375019035709468145420282032960056398514974627427867049739595956058232968group;
        let g200: group = 3314926401051844199662573581372391161348080409234850532455607344048390998105group;
        let g201: group = 7548703820795433231418067765202486609084015075003853688535657716899934245285group;
        let g202: group = 1483066241477485968736277489039864290023694054255726235429128211662872780946group;
        let g203: group = 1353032454034805243052869092398505605754962060925933251451392100155303709986group;
        let g204: group = 6515903689731696727199523237008904311317542479187019600051608815610538210861group;
        let g205: group = 12174238491946513509824338276011345799613861735441388747299655849496622165group;
        let g206: group = 669575542959930485434232647492714733779779936918016617198789527432404242072group;
        let g207: group = 6838120120340986804704529386735241108020271578421384107126377251541696933699group;
        let g208: group = 7686587048775592071702281099166312930518339167236076225997780044327453014416group;
        let g209: group = 3670760199463920645809255088503118835983315407137599128785733058704393658009group;
        let g210: group = 1764952557800708650135554113779123514149363949189121346314233409502688929372group;
        let g211: group = 3980543385715668541103354635963628260045751096763350312790197144361268087034group;
        let g212: group = 7652452802326486617721235356642890666498846908721464168756704813385980638455group;
        let g213: group = 8256603149281935710744541104721909088075833708980071977930647076862538969646group;
        let g214: group = 4745437776051646461104921616390684085868309507425160528453310755174595590980group;
        let g215: group = 4211379036761531174186405890082219430710499198375771561237106495364624827222group;
        let g216: group = 2486367148750295799068071153521779928174528019256185864083400353296894653440group;
        let g217: group = 7934220173553371983503402471385836991164590333100406486574228496470126750931group;
        let g218: group = 1531267906298025388278462992051413822960180781119313181311883434009546455297group;
        let g219: group = 2426155342957299416534644485738886399385355522736546077336838829173538972725group;
        let g220: group = 1203276027110576906792048547631384033734844387026701880441313919333745335332group;
        let g221: group = 6415895159516411992671527870136114374070674306533614518307641001272921282543group;
        let g222: group = 4263293614315728491424803299185288608473070121658511887854717441335528757780group;
        let g223: group = 7120228201013917775439521860178521394659382104130855438117682001364503125751group;
        let g224: group = 2474794888816119088604411988574861154901043115361034022649290700211928485430group;
        let g225: group = 5239184650936467893724116926888637756101665828903824755784167948806477095788group;
        let g226: group = 3351475469143985602732505865139818647535309213436647834090681096629156638996group;
        let g227: group = 7826030323340211862507399983907370849527432815053304373684844774374625263197group;
        let g228: group = 6228646687552099206879061848305611353550977959439731215863706879552488211124group;
        let g229: group = 3394176801228062418150889353032542256420539609433375376966056143456245287085group;
        let g230: group = 3352838288423447494480934699866019415254293829787544821118083036916868367163group;
        let g231: group = 617426098151189430540299835703541502621021080707728271571970095111199467721group;
        let g232: group = 1194386893270008468502715947349382665732488818105537451954786411146140034607group;
        let g233: group = 6178509000249835468142794662487766036985625565798098353883696332662629308634group;
        let g234: group = 4252714875442092793257054227125230824485078097721595273922850223883280624880group;
        let g235: group = 4074420505696254140969061824678558827644405629580505081227679800469181125904group;
        let g236: group = 7728272514002753847377839884183710639820272958277285210852261273195721401582group;
        let g237: group = 1241364129629676538032000592835715376554853474581313471358957933502912987648group;
        let g238: group = 7796934143575345650926013588754918055787859437323695031273264005134164426730group;
        let g239: group = 1612039353941921130112834158445267659242875836799261952803314579200803584512group;
        let g240: group = 2956917746089413431565224146518448194754450408840217445452506734117239213829group;
        let g241: group = 4054510448097448979615905898603688101949598079538907509486538603684192586362group;
        let g242: group = 2917167771597844861725205352427757717307804376442987699252256068946802140178group;
        let g243: group = 2229256584020906236624679728201734147848566787869934051593938498239362575420group;
        let g244: group = 138578601526925967538158431835273519424088021405668176720754115644495128172group;
        let g245: group = 7759752829925887612858093533413917530603648909888063026541981440860213782985group;
        let g246: group = 6703686677562268037098852725573959565125532611642084252285379698528051362964group;
        let g247: group = 8130407765195990088102435047168059973176015282641394452817316502054948121364group;
        let g248: group = 3460714397233474114211358085490150128078208031632668235753634252766528358705group;
        let g249: group = 3220596044445399880216552183525483003849591697677958184463619252218637957971group;
        let g250: group = 6525336517891143740932032912479171564241056432632415723920587101071593919660group;
        let g251: group = 4287019517498917834496788416812040337655953337199894656919038479329623788626group;

        let g1_r1: group = g1 * r1_32.r1;
        let g2_r2: group = g2 * r1_32.r2;
        let g3_r3: group = g3 * r1_32.r3;
        let g4_r4: group = g4 * r1_32.r4;
        let g5_r5: group = g5 * r1_32.r5;
        let g6_r6: group = g6 * r1_32.r6;
        let g7_r7: group = g7 * r1_32.r7;
        let g8_r8: group = g8 * r1_32.r8;
        let g9_r9: group = g9 * r1_32.r9;
        let g10_r10: group = g10 * r1_32.r10;
        let g11_r11: group = g11 * r1_32.r11;
        let g12_r12: group = g12 * r1_32.r12;
        let g13_r13: group = g13 * r1_32.r13;
        let g14_r14: group = g14 * r1_32.r14;
        let g15_r15: group = g15 * r1_32.r15;
        let g16_r16: group = g16 * r1_32.r16;
        let g17_r17: group = g17 * r1_32.r17;
        let g18_r18: group = g18 * r1_32.r18;
        let g19_r19: group = g19 * r1_32.r19;
        let g20_r20: group = g20 * r1_32.r20;
        let g21_r21: group = g21 * r1_32.r21;
        let g22_r22: group = g22 * r1_32.r22;
        let g23_r23: group = g23 * r1_32.r23;
        let g24_r24: group = g24 * r1_32.r24;
        let g25_r25: group = g25 * r1_32.r25;
        let g26_r26: group = g26 * r1_32.r26;
        let g27_r27: group = g27 * r1_32.r27;
        let g28_r28: group = g28 * r1_32.r28;
        let g29_r29: group = g29 * r1_32.r29;
        let g30_r30: group = g30 * r1_32.r30;
        let g31_r31: group = g31 * r1_32.r31;
        let g32_r32: group = g32 * r1_32.r32;
        let g_r1_32_sum: group = g1_r1 + g2_r2 + g3_r3 + g4_r4 + g5_r5 + g6_r6 + g7_r7 + g8_r8 + g9_r9 + g10_r10 + g11_r11 + g12_r12 + g13_r13 + g14_r14 + g15_r15 + g16_r16 + g17_r17 + g18_r18 + g19_r19 + g20_r20 + g21_r21 + g22_r22 + g23_r23 + g24_r24 + g25_r25 + g26_r26 + g27_r27 + g28_r28 + g29_r29 + g30_r30 + g31_r31 + g32_r32;

        let g33_r33: group = g33 * r33_64.r1;
        let g34_r34: group = g34 * r33_64.r2;
        let g35_r35: group = g35 * r33_64.r3;
        let g36_r36: group = g36 * r33_64.r4;
        let g37_r37: group = g37 * r33_64.r5;
        let g38_r38: group = g38 * r33_64.r6;
        let g39_r39: group = g39 * r33_64.r7;
        let g40_r40: group = g40 * r33_64.r8;
        let g41_r41: group = g41 * r33_64.r9;
        let g42_r42: group = g42 * r33_64.r10;
        let g43_r43: group = g43 * r33_64.r11;
        let g44_r44: group = g44 * r33_64.r12;
        let g45_r45: group = g45 * r33_64.r13;
        let g46_r46: group = g46 * r33_64.r14;
        let g47_r47: group = g47 * r33_64.r15;
        let g48_r48: group = g48 * r33_64.r16;
        let g49_r49: group = g49 * r33_64.r17;
        let g50_r50: group = g50 * r33_64.r18;
        let g51_r51: group = g51 * r33_64.r19;
        let g52_r52: group = g52 * r33_64.r20;
        let g53_r53: group = g53 * r33_64.r21;
        let g54_r54: group = g54 * r33_64.r22;
        let g55_r55: group = g55 * r33_64.r23;
        let g56_r56: group = g56 * r33_64.r24;
        let g57_r57: group = g57 * r33_64.r25;
        let g58_r58: group = g58 * r33_64.r26;
        let g59_r59: group = g59 * r33_64.r27;
        let g60_r60: group = g60 * r33_64.r28;
        let g61_r61: group = g61 * r33_64.r29;
        let g62_r62: group = g62 * r33_64.r30;
        let g63_r63: group = g63 * r33_64.r31;
        let g64_r64: group = g64 * r33_64.r32;
        let g_r33_64_sum: group = g33_r33 + g34_r34 + g35_r35 + g36_r36 + g37_r37 + g38_r38 + g39_r39 + g40_r40 + g41_r41 + g42_r42 + g43_r43 + g44_r44 + g45_r45 + g46_r46 + g47_r47 + g48_r48 + g49_r49 + g50_r50 + g51_r51 + g52_r52 + g53_r53 + g54_r54 + g55_r55 + g56_r56 + g57_r57 + g58_r58 + g59_r59 + g60_r60 + g61_r61 + g62_r62 + g63_r63 + g64_r64;

        let g65_r65: group = g65 * r65_96.r1;
        let g66_r66: group = g66 * r65_96.r2;
        let g67_r67: group = g67 * r65_96.r3;
        let g68_r68: group = g68 * r65_96.r4;
        let g69_r69: group = g69 * r65_96.r5;
        let g70_r70: group = g70 * r65_96.r6;
        let g71_r71: group = g71 * r65_96.r7;
        let g72_r72: group = g72 * r65_96.r8;
        let g73_r73: group = g73 * r65_96.r9;
        let g74_r74: group = g74 * r65_96.r10;
        let g75_r75: group = g75 * r65_96.r11;
        let g76_r76: group = g76 * r65_96.r12;
        let g77_r77: group = g77 * r65_96.r13;
        let g78_r78: group = g78 * r65_96.r14;
        let g79_r79: group = g79 * r65_96.r15;
        let g80_r80: group = g80 * r65_96.r16;
        let g81_r81: group = g81 * r65_96.r17;
        let g82_r82: group = g82 * r65_96.r18;
        let g83_r83: group = g83 * r65_96.r19;
        let g84_r84: group = g84 * r65_96.r20;
        let g85_r85: group = g85 * r65_96.r21;
        let g86_r86: group = g86 * r65_96.r22;
        let g87_r87: group = g87 * r65_96.r23;
        let g88_r88: group = g88 * r65_96.r24;
        let g89_r89: group = g89 * r65_96.r25;
        let g90_r90: group = g90 * r65_96.r26;
        let g91_r91: group = g91 * r65_96.r27;
        let g92_r92: group = g92 * r65_96.r28;
        let g93_r93: group = g93 * r65_96.r29;
        let g94_r94: group = g94 * r65_96.r30;
        let g95_r95: group = g95 * r65_96.r31;
        let g96_r96: group = g96 * r65_96.r32;
        let g_r65_96_sum: group = g65_r65 + g66_r66 + g67_r67 + g68_r68 + g69_r69 + g70_r70 + g71_r71 + g72_r72 + g73_r73 + g74_r74 + g75_r75 + g76_r76 + g77_r77 + g78_r78 + g79_r79 + g80_r80 + g81_r81 + g82_r82 + g83_r83 + g84_r84 + g85_r85 + g86_r86 + g87_r87 + g88_r88 + g89_r89 + g90_r90 + g91_r91 + g92_r92 + g93_r93 + g94_r94 + g95_r95 + g96_r96;


        let g97_r97: group = g97 * r97_128.r1;
        let g98_r98: group = g98 * r97_128.r2;
        let g99_r99: group = g99 * r97_128.r3;
        let g100_r100: group = g100 * r97_128.r4;
        let g101_r101: group = g101 * r97_128.r5;
        let g102_r102: group = g102 * r97_128.r6;
        let g103_r103: group = g103 * r97_128.r7;
        let g104_r104: group = g104 * r97_128.r8;
        let g105_r105: group = g105 * r97_128.r9;
        let g106_r106: group = g106 * r97_128.r10;
        let g107_r107: group = g107 * r97_128.r11;
        let g108_r108: group = g108 * r97_128.r12;
        let g109_r109: group = g109 * r97_128.r13;
        let g110_r110: group = g110 * r97_128.r14;
        let g111_r111: group = g111 * r97_128.r15;
        let g112_r112: group = g112 * r97_128.r16;
        let g113_r113: group = g113 * r97_128.r17;
        let g114_r114: group = g114 * r97_128.r18;
        let g115_r115: group = g115 * r97_128.r19;
        let g116_r116: group = g116 * r97_128.r20;
        let g117_r117: group = g117 * r97_128.r21;
        let g118_r118: group = g118 * r97_128.r22;
        let g119_r119: group = g119 * r97_128.r23;
        let g120_r120: group = g120 * r97_128.r24;
        let g121_r121: group = g121 * r97_128.r25;
        let g122_r122: group = g122 * r97_128.r26;
        let g123_r123: group = g123 * r97_128.r27;
        let g124_r124: group = g124 * r97_128.r28;
        let g125_r125: group = g125 * r97_128.r29;
        let g126_r126: group = g126 * r97_128.r30;
        let g127_r127: group = g127 * r97_128.r31;
        let g128_r128: group = g128 * r97_128.r32;
        let g_r97_128_sum: group = g97_r97 + g98_r98 + g99_r99 + g100_r100 + g101_r101 + g102_r102 + g103_r103 + g104_r104 + g105_r105 + g106_r106 + g107_r107 + g108_r108 + g109_r109 + g110_r110 + g111_r111 + g112_r112 + g113_r113 + g114_r114 + g115_r115 + g116_r116 + g117_r117 + g118_r118 + g119_r119 + g120_r120 + g121_r121 + g122_r122 + g123_r123 + g124_r124 + g125_r125 + g126_r126 + g127_r127 + g128_r128;

        let g129_r129: group = g129 * r129_160.r1;
        let g130_r130: group = g130 * r129_160.r2;
        let g131_r131: group = g131 * r129_160.r3;
        let g132_r132: group = g132 * r129_160.r4;
        let g133_r133: group = g133 * r129_160.r5;
        let g134_r134: group = g134 * r129_160.r6;
        let g135_r135: group = g135 * r129_160.r7;
        let g136_r136: group = g136 * r129_160.r8;
        let g137_r137: group = g137 * r129_160.r9;
        let g138_r138: group = g138 * r129_160.r10;
        let g139_r139: group = g139 * r129_160.r11;
        let g140_r140: group = g140 * r129_160.r12;
        let g141_r141: group = g141 * r129_160.r13;
        let g142_r142: group = g142 * r129_160.r14;
        let g143_r143: group = g143 * r129_160.r15;
        let g144_r144: group = g144 * r129_160.r16;
        let g145_r145: group = g145 * r129_160.r17;
        let g146_r146: group = g146 * r129_160.r18;
        let g147_r147: group = g147 * r129_160.r19;
        let g148_r148: group = g148 * r129_160.r20;
        let g149_r149: group = g149 * r129_160.r21;
        let g150_r150: group = g150 * r129_160.r22;
        let g151_r151: group = g151 * r129_160.r23;
        let g152_r152: group = g152 * r129_160.r24;
        let g153_r153: group = g153 * r129_160.r25;
        let g154_r154: group = g154 * r129_160.r26;
        let g155_r155: group = g155 * r129_160.r27;
        let g156_r156: group = g156 * r129_160.r28;
        let g157_r157: group = g157 * r129_160.r29;
        let g158_r158: group = g158 * r129_160.r30;
        let g159_r159: group = g159 * r129_160.r31;
        let g160_r160: group = g160 * r129_160.r32;
        let g_r129_160_sum: group = g129_r129 + g130_r130 + g131_r131 + g132_r132 + g133_r133 + g134_r134 + g135_r135 + g136_r136 + g137_r137 + g138_r138 + g139_r139 + g140_r140 + g141_r141 + g142_r142 + g143_r143 + g144_r144 + g145_r145 + g146_r146 + g147_r147 + g148_r148 + g149_r149 + g150_r150 + g151_r151 + g152_r152 + g153_r153 + g154_r154 + g155_r155 + g156_r156 + g157_r157 + g158_r158 + g159_r159 + g160_r160;

        let g161_r161: group = g161 * r161_192.r1;
        let g162_r162: group = g162 * r161_192.r2;
        let g163_r163: group = g163 * r161_192.r3;
        let g164_r164: group = g164 * r161_192.r4;
        let g165_r165: group = g165 * r161_192.r5;
        let g166_r166: group = g166 * r161_192.r6;
        let g167_r167: group = g167 * r161_192.r7;
        let g168_r168: group = g168 * r161_192.r8;
        let g169_r169: group = g169 * r161_192.r9;
        let g170_r170: group = g170 * r161_192.r10;
        let g171_r171: group = g171 * r161_192.r11;
        let g172_r172: group = g172 * r161_192.r12;
        let g173_r173: group = g173 * r161_192.r13;
        let g174_r174: group = g174 * r161_192.r14;
        let g175_r175: group = g175 * r161_192.r15;
        let g176_r176: group = g176 * r161_192.r16;
        let g177_r177: group = g177 * r161_192.r17;
        let g178_r178: group = g178 * r161_192.r18;
        let g179_r179: group = g179 * r161_192.r19;
        let g180_r180: group = g180 * r161_192.r20;
        let g181_r181: group = g181 * r161_192.r21;
        let g182_r182: group = g182 * r161_192.r22;
        let g183_r183: group = g183 * r161_192.r23;
        let g184_r184: group = g184 * r161_192.r24;
        let g185_r185: group = g185 * r161_192.r25;
        let g186_r186: group = g186 * r161_192.r26;
        let g187_r187: group = g187 * r161_192.r27;
        let g188_r188: group = g188 * r161_192.r28;
        let g189_r189: group = g189 * r161_192.r29;
        let g190_r190: group = g190 * r161_192.r30;
        let g191_r191: group = g191 * r161_192.r31;
        let g192_r192: group = g192 * r161_192.r32;
        let g_r161_192_sum: group = g161_r161 + g162_r162 + g163_r163 + g164_r164 + g165_r165 + g166_r166 + g167_r167 + g168_r168 + g169_r169 + g170_r170 + g171_r171 + g172_r172 + g173_r173 + g174_r174 + g175_r175 + g176_r176 + g177_r177 + g178_r178 + g179_r179 + g180_r180 + g181_r181 + g182_r182 + g183_r183 + g184_r184 + g185_r185 + g186_r186 + g187_r187 + g188_r188 + g189_r189 + g190_r190 + g191_r191 + g192_r192;

        let g193_r193: group = g193 * r193_224.r1;
        let g194_r194: group = g194 * r193_224.r2;
        let g195_r195: group = g195 * r193_224.r3;
        let g196_r196: group = g196 * r193_224.r4;
        let g197_r197: group = g197 * r193_224.r5;
        let g198_r198: group = g198 * r193_224.r6;
        let g199_r199: group = g199 * r193_224.r7;
        let g200_r200: group = g200 * r193_224.r8;
        let g201_r201: group = g201 * r193_224.r9;
        let g202_r202: group = g202 * r193_224.r10;
        let g203_r203: group = g203 * r193_224.r11;
        let g204_r204: group = g204 * r193_224.r12;
        let g205_r205: group = g205 * r193_224.r13;
        let g206_r206: group = g206 * r193_224.r14;
        let g207_r207: group = g207 * r193_224.r15;
        let g208_r208: group = g208 * r193_224.r16;
        let g209_r209: group = g209 * r193_224.r17;
        let g210_r210: group = g210 * r193_224.r18;
        let g211_r211: group = g211 * r193_224.r19;
        let g212_r212: group = g212 * r193_224.r20;
        let g213_r213: group = g213 * r193_224.r21;
        let g214_r214: group = g214 * r193_224.r22;
        let g215_r215: group = g215 * r193_224.r23;
        let g216_r216: group = g216 * r193_224.r24;
        let g217_r217: group = g217 * r193_224.r25;
        let g218_r218: group = g218 * r193_224.r26;
        let g219_r219: group = g219 * r193_224.r27;
        let g220_r220: group = g220 * r193_224.r28;
        let g221_r221: group = g221 * r193_224.r29;
        let g222_r222: group = g222 * r193_224.r30;
        let g223_r223: group = g223 * r193_224.r31;
        let g224_r224: group = g224 * r193_224.r32;
        let g_r193_224_sum: group = g193_r193 + g194_r194 + g195_r195 + g196_r196 + g197_r197 + g198_r198 + g199_r199 + g200_r200 + g201_r201 + g202_r202 + g203_r203 + g204_r204 + g205_r205 + g206_r206 + g207_r207 + g208_r208 + g209_r209 + g210_r210 + g211_r211 + g212_r212 + g213_r213 + g214_r214 + g215_r215 + g216_r216 + g217_r217 + g218_r218 + g219_r219 + g220_r220 + g221_r221 + g222_r222 + g223_r223 + g224_r224;

        let g225_r225: group = g225 * r225_251.r1;
        let g226_r226: group = g226 * r225_251.r2;
        let g227_r227: group = g227 * r225_251.r3;
        let g228_r228: group = g228 * r225_251.r4;
        let g229_r229: group = g229 * r225_251.r5;
        let g230_r230: group = g230 * r225_251.r6;
        let g231_r231: group = g231 * r225_251.r7;
        let g232_r232: group = g232 * r225_251.r8;
        let g233_r233: group = g233 * r225_251.r9;
        let g234_r234: group = g234 * r225_251.r10;
        let g235_r235: group = g235 * r225_251.r11;
        let g236_r236: group = g236 * r225_251.r12;
        let g237_r237: group = g237 * r225_251.r13;
        let g238_r238: group = g238 * r225_251.r14;
        let g239_r239: group = g239 * r225_251.r15;
        let g240_r240: group = g240 * r225_251.r16;
        let g241_r241: group = g241 * r225_251.r17;
        let g242_r242: group = g242 * r225_251.r18;
        let g243_r243: group = g243 * r225_251.r19;
        let g244_r244: group = g244 * r225_251.r20;
        let g245_r245: group = g245 * r225_251.r21;
        let g246_r246: group = g246 * r225_251.r22;
        let g247_r247: group = g247 * r225_251.r23;
        let g248_r248: group = g248 * r225_251.r24;
        let g249_r249: group = g249 * r225_251.r25;
        let g250_r250: group = g250 * r225_251.r26;
        let g251_r251: group = g251 * r225_251.r27;
        let g_r225_251_sum: group = g225_r225 + g226_r226 + g227_r227 + g228_r228 + g229_r229 + g230_r230 + g231_r231 + g232_r232 + g233_r233 + g234_r234 + g235_r235 + g236_r236 + g237_r237 + g238_r238 + g239_r239 + g240_r240 + g241_r241 + g242_r242 + g243_r243 + g244_r244 + g245_r245 + g246_r246 + g247_r247 + g248_r248 + g249_r249 + g250_r250 + g251_r251;

        return g_r1_32_sum + g_r33_64_sum + g_r65_96_sum + g_r97_128_sum +  g_r129_160_sum + g_r161_192_sum + g_r193_224_sum + g_r225_251_sum; 
    }



    struct ScalarBits {
        r1: scalar,
        r2: scalar,
        r3: scalar,
        r4: scalar,
        r5: scalar,
        r6: scalar,
        r7: scalar,
        r8: scalar,
        r9: scalar,
        r10: scalar,
        r11: scalar,
        r12: scalar,
        r13: scalar,
        r14: scalar,
        r15: scalar,
        r16: scalar,
        r17: scalar,
        r18: scalar,
        r19: scalar,
        r20: scalar,
        r21: scalar,
        r22: scalar,
        r23: scalar,
        r24: scalar,
        r25: scalar,
        r26: scalar,
        r27: scalar,
        r28: scalar,
        r29: scalar,
        r30: scalar,
        r31: scalar,
        r32: scalar,
    }


    /// ██████████████████████████████████████████████████████████████████████
    ///                                 AMM
    /// ██████████████████████████████████████████████████████████████████████


    struct Pool {
        token_x_id: u64,
        token_y_id: u64        
    }
    
    mapping registered_pools: field => Pool;
    mapping pool_balance_x: field => u128; 
    mapping pool_balance_y: field => u128; 

    transition create_pool(public token_x_id: u64, public token_y_id: u64) {
        return then finalize(token_x_id, token_y_id);
    }

    finalize create_pool(public token_x_id: u64, public token_y_id: u64) {
        let pool: Pool = Pool {token_x_id, token_y_id};
        let pool_id: field = Pedersen128::hash_to_field(pool);
        assert(!Mapping::contains(registered_pools, pool_id));
        Mapping::set(registered_pools, pool_id, pool);
    }

    transition swap_exact_in(
        in_token: Token, 
        out_token_id: u64,
        slippage: u128,
    ) -> Token {
        return Token {
            owner: self.caller,
            amount: in_token.amount,
            token_id: out_token_id,
        } then finalize(in_token.token_id, out_token_id, slippage);        
    }

    finalize swap_exact_in(in_token_id: u64, out_token_id: u64, slippage: u128) {
        assert(Mapping::contains(registered_tokens, out_token_id));        
    }

    transition test() -> u32  {
        return 1u32;
    }

}

